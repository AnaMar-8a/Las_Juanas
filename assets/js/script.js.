document.addEventListener('DOMContentLoaded', function () {
    let glossaryData = [];

    // =================================================================
    // --- 1. CARGAR DATOS DEL GLOSARIO ---
    // =================================================================
    async function loadGlossaryData() {
        try {
            const response = await fetch('glossary.json');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            glossaryData = await response.json();
            initializeApp();
        } catch (error) {
            console.error("Could not load glossary data:", error);
            document.getElementById('main-content').innerHTML = `<p class="text-red-500 text-center">Error al cargar los datos del glosario. Por favor, revisa la consola.</p>`;
        }
    }


    // =================================================================
    // --- 2. CONFIGURACIÓN E INICIALIZACIÓN DE ELEMENTOS DEL DOM ---
    // =================================================================
    const mainContent = document.getElementById('main-content');
    const modalOverlay = document.getElementById('modal-overlay');
    const modalContent = document.getElementById('modal-content');
    const canvas = document.getElementById('bg-canvas');
    const ctx = canvas.getContext('2d');
    
    function initializeApp() {
        const alphabetNavDesktop = document.getElementById('alphabet-nav-desktop');
        const alphabetNavMobile = document.getElementById('mobile-nav-scroll');
        const homeButtonDesktop = document.getElementById('home-button-desktop');
        const homeButtonMobile = document.getElementById('home-button-mobile');
        
        const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').filter(letter => 
            glossaryData.some(item => item.letter === letter)
        );

        // =================================================================
        // --- 3. RENDERIZADO DE VISTAS (DIAPOSITIVAS) ---
        // =================================================================
        
        function mostrarAbrazoInicial() {
            mainContent.innerHTML = `
                 <div class="content-slide h-full flex flex-col justify-between items-center text-center relative">
                    <!-- Banner -->
                    <div class="w-full bg-purple-100/50 text-purple-800 text-sm py-1 text-center absolute top-0 left-0">
                        Este Glosario hace parte de las herramientas generadas por la <strong>Escuela de Formación Política Feminista Las Juanas</strong>
                    </div>

                    <!-- Main Content -->
                    <div class="flex-grow flex flex-col justify-center pt-10">
                        <h3 class="text-2xl text-purple-700 font-semibold font-title">Palabras que nutren nuestro mundo</h3>
                        <h1 class="text-4xl md:text-6xl font-extrabold text-gray-800 mt-4 tracking-tighter font-title">Abecedario Político</h1>
                        <p class="text-base md:text-lg text-gray-600 max-w-3xl mx-auto mt-6 italic">"Nombrar es el primer paso para transformar."</p>
                        <p class="text-sm md:text-md text-gray-700 max-w-3xl mx-auto mt-2">Este glosario es una herramienta viva, una invitación a apropiarnos de los conceptos que nos permiten analizar nuestra realidad con una mirada crítica y, sobre todo, construir nuevos horizontes de posibilidad.</p>
                        <div class="mt-8 flex justify-center items-center gap-4">
                            <input id="search-input" type="text" placeholder="Buscar un término..." class="w-full max-w-xs p-2 rounded-full border-2 border-stone-300 bg-white/50 focus:border-purple-400 focus:ring-0 outline-none transition-colors">
                            <button id="random-term-btn" class="bg-green-500 text-white font-bold py-2 px-4 rounded-full shadow-lg hover:bg-green-600 transition-transform transform hover:scale-105">
                                Aleatorio
                            </button>
                        </div>
                    </div>

                    <!-- Co-creators -->
                    <div class="flex-shrink-0 w-full pt-4 mb-10 pb-2"> <!-- pb-2 = 8px -->
                         <h4 class="font-bold text-gray-700 mb-3 font-title">Co-creación de la escuela:</h4>
                        <div class="flex flex-wrap gap-x-6 gap-y-2 justify-center text-sm">
                            <a href="https://www.instagram.com/electas__/" target="_blank" class="creator-link">Movimiento Político Electas</a>
                            <a href="https://www.institutoupdate.org.br/es/" target="_blank" class="creator-link">Instituto Update</a>
                            <a href="#" class="creator-link" onclick="event.preventDefault();">Corporación Recuperando Identidad</a>
                        </div>
                    </div>

                    <!-- Footer -->
                    <footer class="w-full bg-purple-700 text-white text-center p-2 absolute bottom-0 left-0 text-xs">
                        Diseño por <a href="https://www.linkedin.com/in/8aanamaria/" target="_blank" class="font-bold underline hover:text-purple-200">AnaMar8a</a>
                    </footer>
                </div>
            `;
             document.getElementById('random-term-btn').addEventListener('click', mostrarTerminoAleatorio);
             document.getElementById('search-input').addEventListener('input', manejarBusqueda);
        }
        
        function renderizarListaDeTerminos(letter) {
            const terms = glossaryData.filter(item => item.letter === letter);
            const termButtons = terms.map(term => 
                `<button class="term-link block w-full text-left text-2xl md:text-3xl font-bold text-gray-700 p-3 md:p-4 rounded-xl hover:bg-white/60 transition-colors" data-term="${term.term}">${term.term}</button>`
            ).join('');

            mainContent.innerHTML = `
                <div class="content-slide">
                    <h2 class="text-6xl md:text-8xl font-extrabold text-purple-800/10 mb-8">${letter}</h2>
                    <div class="space-y-3">${termButtons}</div>
                </div>
            `;
            
            document.querySelectorAll('.term-link').forEach(button => {
                button.addEventListener('click', () => {
                    abrirCuidadoDeLaPalabra(button.dataset.term);
                });
            });
        }
        
        // =================================================================
        // --- 4. LÓGICA DEL MODAL (POP-UP) Y BÚSQUEDA ---
        // =================================================================

        function abrirCuidadoDeLaPalabra(termName) {
            const termData = glossaryData.find(item => item.term === termName);
            if (!termData) return;
            const contentHTML = `
                <button id="close-modal-inner" class="absolute top-4 right-4 text-gray-400 hover:text-gray-800 text-3xl font-bold" aria-label="Volver">&times;</button>
                <h2 class="text-3xl md:text-4xl font-extrabold font-title text-gray-800 mb-6">${termData.term}</h2>
                <div class="prose prose-lg max-w-none text-gray-700">
                    <p>${termData.definition}</p>
                    <div class="mt-6 p-4 rounded-xl bg-[#fbf9f6]">
                        <h4 class="font-bold text-gray-800">Ejemplo cotidiano:</h4>
                        <p class="italic">${termData.practice}</p>
                    </div>
                </div>
            `;
            modalContent.innerHTML = contentHTML;
            
            modalOverlay.classList.remove('opacity-0', 'pointer-events-none');
            modalContent.classList.remove('scale-95', 'opacity-0');

            document.getElementById('close-modal-inner').addEventListener('click', cerrarEspacioDeReflexion);
        }

        function cerrarEspacioDeReflexion() {
            modalOverlay.classList.add('opacity-0', 'pointer-events-none');
            modalContent.classList.add('scale-95', 'opacity-0');
        }

        function mostrarTerminoAleatorio() {
            const randomIndex = Math.floor(Math.random() * glossaryData.length);
            const randomTerm = glossaryData[randomIndex];
            abrirCuidadoDeLaPalabra(randomTerm.term);
        }

        function manejarBusqueda(event) {
             const searchTerm = event.target.value.toLowerCase();
             
             let resultsContainer = document.getElementById('search-results-container');
             if (!resultsContainer) {
                 resultsContainer = document.createElement('div');
                 resultsContainer.id = 'search-results-container';
                 resultsContainer.className = 'absolute top-24 left-1/2 -translate-x-1/2 w-72 bg-white/90 backdrop-blur-sm shadow-lg rounded-xl p-2 z-20';
                 mainContent.appendChild(resultsContainer);
             }

             if (searchTerm.length < 2) {
                 resultsContainer.innerHTML = '';
                 return;
             }
             
             const filteredData = glossaryData.filter(item => item.term.toLowerCase().includes(searchTerm));
             const termButtons = filteredData.map(term => 
                `<button class="term-link block w-full text-left text-lg font-bold text-gray-700 p-2 rounded-lg hover:bg-white/60 transition-colors" data-term="${term.term}">${term.term}</button>`
             ).join('');
             
             resultsContainer.innerHTML = termButtons || `<p class="text-center text-sm text-stone-500 p-2">No se encontraron términos.</p>`;

             document.querySelectorAll('.term-link').forEach(button => {
                button.addEventListener('click', () => {
                    abrirCuidadoDeLaPalabra(button.dataset.term);
                    resultsContainer.innerHTML = '';
                    document.getElementById('search-input').value = '';
                });
            });
        }
        
        // =================================================================
        // --- 5. NAVEGACIÓN Y MANEJO DE EVENTOS ---
        // =================================================================
        
        function setupNav() {
            alphabetNavDesktop.innerHTML = '';
            alphabetNavMobile.innerHTML = '';

            alphabet.forEach(letter => {
                const linkDesktop = document.createElement('a');
                linkDesktop.href = '#';
                linkDesktop.textContent = letter;
                linkDesktop.className = 'nav-link w-12 h-12 flex items-center justify-center rounded-xl font-bold text-purple-800 hover:bg-white/50 transition-all duration-200';
                linkDesktop.dataset.letter = letter;
                alphabetNavDesktop.appendChild(linkDesktop);
                
                const linkMobile = document.createElement('a');
                linkMobile.href = '#';
                linkMobile.textContent = letter;
                linkMobile.className = 'nav-link h-10 w-10 flex-shrink-0 flex items-center justify-center rounded-lg font-bold text-purple-800 hover:bg-white/50 transition-all duration-200';
                linkMobile.dataset.letter = letter;
                alphabetNavMobile.appendChild(linkMobile);
                
                const handleNavClick = (e) => {
                    e.preventDefault();
                    document.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
                    document.querySelectorAll(`.nav-link[data-letter="${letter}"]`).forEach(l => l.classList.add('active'));
                    renderizarListaDeTerminos(letter);
                }

                linkDesktop.addEventListener('click', handleNavClick);
                linkMobile.addEventListener('click', handleNavClick);
            });
            
            const handleHomeClick = () => {
                 document.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
                 mostrarAbrazoInicial();
            }

            homeButtonDesktop.addEventListener('click', handleHomeClick);
            homeButtonMobile.addEventListener('click', handleHomeClick);
            
            modalOverlay.addEventListener('click', (e) => {
                if(e.target === modalOverlay) {
                    cerrarEspacioDeReflexion();
                }
            });
        }
        
        // =================================================================
        // --- 6. ANIMACIÓN DE FONDO (RIZOMA) ---
        // =================================================================
        let nodes = [];
        const colors = ['#a78bfa', '#c4b5fd', '#d946ef', '#ec4899'];
        const emphasisColor = '#9CA986'; 
        let startTime = null;
        let animationFrameId;

        function resizeCanvas() {
            const container = document.getElementById('presentation-container');
            canvas.width = container.clientWidth;
            canvas.height = container.clientHeight;
        }

        class Node {
            constructor(x, y) {
                this.x = x || Math.random() * canvas.width;
                this.y = y || Math.random() * canvas.height;
                this.vx = Math.random() * 0.1 - 0.05; 
                this.vy = Math.random() * 0.1 - 0.05; 
                this.radius = Math.random() * 1.5 + 1;
            }

            update() {
                this.x += this.vx;
                this.y += this.vy;
                if (this.x < 0 || this.x > canvas.width) this.vx *= -1;
                if (this.y < 0 || this.y > canvas.height) this.vy *= -1;
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = emphasisColor;
                ctx.fill();
            }
        }
        
        function initRhizome() {
            nodes = [];
            for (let i = 0; i < 5; i++) {
                nodes.push(new Node());
            }
        }

        function animate() {
            if (!startTime) startTime = Date.now();
            const elapsedTime = Date.now() - startTime;
            const growthDuration = 20 * 60 * 1000;
            const growthFactor = Math.min(elapsedTime / growthDuration, 1);

            ctx.fillStyle = 'rgba(251, 249, 246, 0.1)'; 
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            const maxNodes = 5 + Math.floor(growthFactor * 45);
            if(nodes.length < maxNodes && Math.random() < 0.5){
                nodes.push(new Node());
            }

            const connectionDistance = 100 + growthFactor * 200;

            for (let i = 0; i < nodes.length; i++) {
                for (let j = i + 1; j < nodes.length; j++) {
                    const dx = nodes[i].x - nodes[j].x;
                    const dy = nodes[i].y - nodes[j].y;
                    const distance = Math.sqrt(dx * dx + dy * dy);

                    if (distance < connectionDistance) {
                        ctx.beginPath();
                        ctx.moveTo(nodes[i].x, nodes[i].y);
                        ctx.lineTo(nodes[j].x, nodes[j].y);
                        const alpha = 0.5 - distance / connectionDistance;
                        const colorIndex = Math.floor((i + j) / 5) % colors.length;
                        ctx.strokeStyle = `rgba(${parseInt(colors[colorIndex].slice(1,3),16)},${parseInt(colors[colorIndex].slice(3,5),16)},${parseInt(colors[colorIndex].slice(5,7),16)},${alpha})`;
                        ctx.lineWidth = 0.4;
                        ctx.stroke();
                    }
                }
            }
            
            nodes.forEach((node) => {
                node.update();
                node.draw();
            });

            animationFrameId = requestAnimationFrame(animate);
        }
        
        // =================================================================
        // --- 7. EJECUCIÓN INICIAL ---
        // =================================================================
        
        resizeCanvas();
        initRhizome();
        animate();
        mostrarAbrazoInicial();
        setupNav();

        window.addEventListener('resize', () => {
            cancelAnimationFrame(animationFrameId);
            resizeCanvas();
            initRhizome();
            startTime = null; 
            animate();
        });
    }

    // Iniciar la carga de datos
    loadGlossaryData();
});

